// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudedcat/debt-bot/bot (interfaces: Bot)

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	bot "github.com/cloudedcat/debt-bot/bot"
	gomock "github.com/golang/mock/gomock"
	telebot_v2 "gopkg.in/tucnak/telebot.v2"
	reflect "reflect"
)

// MockBot is a mock of Bot interface
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
}

// MockBotMockRecorder is the mock recorder for MockBot
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockBot) Handle(arg0 interface{}, arg1 bot.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", arg0, arg1)
}

// Handle indicates an expected call of Handle
func (mr *MockBotMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBot)(nil).Handle), arg0, arg1)
}

// Send mocks base method
func (m *MockBot) Send(arg0 telebot_v2.Recipient, arg1 interface{}, arg2 []interface{}, arg3 ...interface{}) (*telebot_v2.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*telebot_v2.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockBotMockRecorder) Send(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBot)(nil).Send), varargs...)
}

// SendInternalError mocks base method
func (m *MockBot) SendInternalError(arg0 telebot_v2.Recipient, arg1 []interface{}) (*telebot_v2.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInternalError", arg0, arg1)
	ret0, _ := ret[0].(*telebot_v2.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInternalError indicates an expected call of SendInternalError
func (mr *MockBotMockRecorder) SendInternalError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInternalError", reflect.TypeOf((*MockBot)(nil).SendInternalError), arg0, arg1)
}

// Start mocks base method
func (m *MockBot) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockBotMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBot)(nil).Start))
}
